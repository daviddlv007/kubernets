╔════════════════════════════════════════════════════════════════════════════╗
║                                                                            ║
║        🚀 MULTI-CLOUD KUBERNETES - PROYECTO MINIMALISTA 🚀                ║
║                                                                            ║
║  Simulación local de arquitectura multi-cluster que se replica            ║
║  idénticamente en nubes reales (AWS, GCP, Azure, etc.)                    ║
║                                                                            ║
╚════════════════════════════════════════════════════════════════════════════╝

📁 ESTRUCTURA DEL PROYECTO
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

kubernets/
├── 📄 README.md                    ← Empieza aquí
├── ⚙️  Makefile                     ← Comandos automáticos
├── 🚫 .gitignore                   
│
├── 🎯 argocd/                      ← GitOps (opcional)
│   ├── README.md
│   └── applications/
│       ├── service-a-example.yaml
│       └── service-b-example.yaml
│
├── ☁️  cloud/                       ← Scripts para VMs cloud
│   └── vm-setup.sh
│
├── 📚 docs/                        ← Documentación completa
│   ├── QUICKSTART.md              ← Setup en 5 minutos
│   ├── ARCHITECTURE.md            ← Detalles técnicos
│   ├── CLOUD_DEPLOYMENT.md        ← Migración a cloud
│   ├── COMMANDS.md                ← Cheatsheet
│   └── STUDENT_NOTES.md           ← Conceptos y experimentos
│
├── 🔧 scripts/                     ← Automatización
│   ├── install-tools.sh
│   └── test-connection.sh
│
└── 🐳 services/                    ← Microservicios
    ├── service-a/                 ← Python/Flask
    │   ├── app.py
    │   ├── Dockerfile
    │   ├── requirements.txt
    │   └── k8s/
    │       ├── deployment.yaml
    │       └── service.yaml
    │
    └── service-b/                 ← Node.js/Express
        ├── server.js
        ├── Dockerfile
        ├── package.json
        └── k8s/
            ├── deployment.yaml
            └── service.yaml

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

⚡ QUICK START (5 minutos)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. Verificar prerequisitos:
   $ make check-deps

2. Setup completo automático:
   $ make setup

3. Probar comunicación:
   $ make test

4. Ver estado:
   $ make status

🎉 ¡Listo! Tienes 2 clusters comunicándose entre sí.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🏗️  ARQUITECTURA
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    ┌────────────────────┐              ┌────────────────────┐
    │   Cluster 1 (K3s)  │              │   Cluster 2 (K3s)  │
    │   Port: 6550       │              │   Port: 6551       │
    │                    │              │                    │
    │  ┌──────────────┐  │              │  ┌──────────────┐  │
    │  │  Service A   │  │   HTTP       │  │  Service B   │  │
    │  │  (Python)    │──┼─────────────>│  │  (Node.js)   │  │
    │  │  Port: 8080  │  │  GET /hello  │  │  Port: 8080  │  │
    │  └──────────────┘  │              │  └──────────────┘  │
    │                    │              │                    │
    │  LoadBalancer      │              │  LoadBalancer      │
    │  → :8081           │              │  → :8082           │
    └────────────────────┘              └────────────────────┘

    Service A llama a Service B → Service B responde → ✅ Multi-cluster!

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🎯 FLUJO DE TRABAJO
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

DESARROLLO LOCAL                          PRODUCCIÓN CLOUD
─────────────────                          ────────────────

1. Desarrollar código                  1. Crear VMs en AWS/GCP
   └─ services/service-a/                 └─ curl -sfL https://get.k3s.io | sh

2. Construir imágenes                  2. Subir imágenes a registry
   └─ make build-images                   └─ docker push ghcr.io/...

3. Cargar en k3d                       3. Desplegar a clusters cloud
   └─ make load-images                    └─ kubectl apply -f ...

4. Desplegar localmente                4. Configurar networking
   └─ make deploy-services                └─ Actualizar SERVICE_B_URL

5. Probar                              5. ¡Funciona igual!
   └─ make test                           └─ curl http://<ip>/call

   ✨ MISMO CÓDIGO, MISMO PROCESO ✨

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🛠️  TECNOLOGÍAS UTILIZADAS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✅ K3s/K3d          - Kubernetes ligero y rápido
✅ Docker           - Containerización
✅ Python/Flask     - Service A (microservicio orquestador)
✅ Node.js/Express  - Service B (microservicio de datos)
✅ ArgoCD           - GitOps (opcional)
✅ Makefile         - Automatización de comandos
✅ YAML             - Infraestructura como código

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📚 DOCUMENTACIÓN
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📖 README.md              - Visión general del proyecto
⚡ docs/QUICKSTART.md     - Setup en 5 minutos
🏗️  docs/ARCHITECTURE.md  - Detalles técnicos completos
☁️  docs/CLOUD_DEPLOYMENT - Guía para migrar a cloud real
📝 docs/COMMANDS.md       - Cheatsheet de comandos
🎓 docs/STUDENT_NOTES.md  - Conceptos y experimentos

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🎓 CONCEPTOS CUBIERTOS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✅ Kubernetes Multi-Cluster         ✅ Service Discovery
✅ Microservicios Distribuidos      ✅ Health Checks
✅ Containerización Docker          ✅ Load Balancing
✅ Infraestructura como Código      ✅ Rolling Updates
✅ GitOps (con ArgoCD)              ✅ Auto-Healing
✅ Multi-Cloud Patterns             ✅ Resource Management

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

💡 COMANDOS PRINCIPALES
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

make help              - Ver todos los comandos
make setup             - Setup completo (clusters + servicios)
make test              - Probar comunicación multi-cluster
make status            - Ver estado de todos los recursos
make logs-service-a    - Ver logs de Service A
make logs-service-b    - Ver logs de Service B
make argocd-ui         - Abrir dashboard de ArgoCD
make clean             - Eliminar todo

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🌐 MIGRACIÓN A CLOUD
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Este proyecto está diseñado para replicarse fácilmente en cloud:

1️⃣  Crear VMs en diferentes clouds (AWS, GCP, Azure, DigitalOcean, etc.)
2️⃣  Ejecutar cloud/vm-setup.sh en cada VM
3️⃣  Subir imágenes a registry público (Docker Hub / GitHub Container Registry)
4️⃣  Aplicar los MISMOS manifiestos YAML
5️⃣  ✅ ¡Funciona igual que local!

Ver: docs/CLOUD_DEPLOYMENT.md para guía detallada

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

💰 COSTOS (Cloud)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Setup Minimalista:
  - 2 VMs (1GB RAM c/u): ~$10-12/mes
  - Oracle Cloud Free Tier: $0 (always free)
  - Linode con crédito: $0 (primeros $100)

Recomendación académica:
  - Oracle Cloud (free) + Linode (con crédito)
  - Costo total: $0 por ~3 meses

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🚀 PRÓXIMOS PASOS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. ✅ Ejecuta make setup
2. 📖 Lee docs/QUICKSTART.md
3. 🧪 Experimenta con los comandos
4. 🔧 Modifica el código de los servicios
5. ☁️  Despliega en cloud real
6. 🎓 Lee docs/STUDENT_NOTES.md para más ideas

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🎉 ¡LISTO! Tu proyecto multi-cloud está completo y listo para usar.

   Empieza con: make setup

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
